name: CI/CD with Docker

on:
  push:
    branches:
      - main
      - '*' # Run on all branches for CI

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Build production images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: fastapi-app:prod
          target: runtime
          build-args: INSTALL_PROD=true
          cache-from: type=gha,scope=prod-cache
          cache-to: type=gha,scope=prod-cache,mode=max
          load: true # Load the image for local testing

      - name: Run tests with Docker Compose (wait for /health)
        run: |
          # start services
          docker-compose -f docker-compose.prod.yml up --build -d

          echo "Installing jq for JSON parsing..."
          sudo apt-get update -y && sudo apt-get install -y jq curl

          echo "Waiting for services to be ready via /health endpoint..."
          # Wait up to 60 seconds (30 tries x 2s)
          READY=0
          for i in $(seq 1 30); do
            # try to request health endpoint; tolerate failures
            HTTP=$(curl -sS -m 3 http://localhost:8000/health || echo "")
            STATUS=$(echo "$HTTP" | jq -r '.status // empty' 2>/dev/null || echo "")
            if [ "$STATUS" = "healthy" ] || [ "$STATUS" = "degraded" ]; then
              echo "Service ready with status: $STATUS"
              READY=1
              break
            fi
            echo "Not ready yet (attempt $i). Response: ${STATUS:-<no-response>}"
            sleep 2
          done

          if [ "$READY" -ne 1 ]; then
            echo "Service didn't become ready in time. Printing logs for debugging..."
            docker-compose -f docker-compose.prod.yml ps
            docker-compose -f docker-compose.prod.yml logs --tail=200
            # fail the job early so we can inspect CI logs
            exit 1
          fi

          echo "Running tests inside web container..."
          # run pytest -q inside the web container (adjust service name if different)
          docker-compose -f docker-compose.prod.yml exec -T web pytest -q

      - name: Clean up Docker containers
        if: always()
        run: docker-compose -f docker-compose.prod.yml down --volumes

  deploy-to-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push production images to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:prod
          target: runtime
          build-args: INSTALL_PROD=true

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/your-app-directory
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
