name: CI/CD with Docker

on:
  push:
    branches:
      - main
      - '*' # Run on all branches for CI

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Build production images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: fastapi-app:prod
          target: runtime
          build-args: INSTALL_PROD=true
          cache-from: type=gha,scope=prod-cache
          cache-to: type=gha,scope=prod-cache,mode=max
          load: true # Load the image for local testing

      - name: Run tests with Docker Compose
        run: |
          # Use docker-compose.prod.yml to simulate a production environment for testing
          docker-compose -f docker-compose.prod.yml up --build -d
          
          echo "Waiting for services to be ready..."
          sleep 10
          
          docker-compose -f docker-compose.prod.yml exec web pytest

      - name: Clean up Docker containers
        if: always()
        run: docker-compose -f docker-compose.prod.yml down --volumes

  deploy-to-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push production images to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:prod
          target: runtime
          build-args: INSTALL_PROD=true

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/your-app-directory
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans