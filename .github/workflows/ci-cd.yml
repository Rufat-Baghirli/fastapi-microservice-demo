name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - '*' # Run on all branches for CI

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: cp .env.dev.example .env.dev

      - name: Start services
        run: docker compose -f docker-compose.dev.yml up --build --no-cache -d

      - name: Wait for services
        run: |
          echo "Waiting for services to be healthy..."
          # Wait up to 60 seconds for the web service to become healthy
          for i in $(seq 1 30); do
            STATUS=$(docker inspect --format '{{.State.Health.Status}}' fastapi_web_dev)
            if [ "$STATUS" = "healthy" ]; then
              echo "Web service is healthy!"
              break
            fi
            echo "Not healthy yet (attempt $i). Status: $STATUS"
            sleep 2
          done
          
          # Final check
          STATUS=$(docker inspect --format '{{.State.Health.Status}}' fastapi_web_dev)
          if [ "$STATUS" != "healthy" ]; then
            echo "Web service did not become healthy in time. Printing logs..."
            docker compose -f docker-compose.dev.yml logs --tail=200
            exit 1
          fi

      - name: Run database migrations
        run: docker compose -f docker-compose.dev.yml exec -T web alembic upgrade head

      - name: Run tests
        run: docker compose -f docker-compose.dev.yml exec -T web python -m pytest -p no:cacheprovider tests/ -v

      - name: Clean up Docker containers
        if: always()
        run: docker compose -f docker-compose.dev.yml down --volumes

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push production images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:latest # Using 'latest' tag for simplicity
          target: runtime
          build-args: INSTALL_PROD=true

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/your-app-directory
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
