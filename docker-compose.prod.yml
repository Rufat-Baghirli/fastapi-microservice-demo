services:
  web:
    container_name: fastapi_web_prod
    build:
      context: .
      args:
        INSTALL_PROD: "true"
      target: runtime
    ports:
      - "8001:8000"
    command: >
      gunicorn app.main:app
      --workers 4
      --worker-class uvicorn.workers.UvicornWorker
      --bind 0.0.0.0:8000
    env_file: .env.prod
    depends_on:
      db-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
      rabbitmq-prod:
        condition: service_healthy
    networks:
      - appnet_prod
    restart: always

  worker:
    container_name: fastapi_worker_prod
    build:
      context: .
      args:
        INSTALL_PROD: "true"
      target: runtime
    command: celery -A app.tasks.worker.celery_app worker --loglevel=info --concurrency=4
    env_file: .env.prod
    depends_on:
      db-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
      rabbitmq-prod:
        condition: service_healthy
    networks:
      - appnet_prod
    restart: always

  db-prod:
    container_name: fastapi_db_prod
    image: postgres:15
    environment:
      POSTGRES_DB: fastapi_db_prod
      POSTGRES_USER: produser
      POSTGRES_PASSWORD: proda55w0rd
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - appnet_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U produser -d fastapi_db_prod"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis-prod:
    container_name: fastapi_redis_prod
    image: redis:7-alpine
    networks:
      - appnet_prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq-prod:
    container_name: fastapi_rabbitmq_prod
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: produser
      RABBITMQ_DEFAULT_PASS: proda55w0rd
    ports:
      - "15673:15672"
    networks:
      - appnet_prod
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  appnet_prod:
    driver: bridge
    name: fastapi_prod_network

volumes:
  postgres_data_prod: